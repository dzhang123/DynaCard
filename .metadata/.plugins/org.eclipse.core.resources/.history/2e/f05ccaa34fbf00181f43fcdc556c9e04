package com.organization.dynacard;

public class DynaCard implements IDynaCard {

	private ICardEdge left, top, right, bottom;
	
	public DynaCard (ICardEdge left, ICardEdge top, ICardEdge right, ICardEdge bottom) {
		this.left = left;
		this.top = top;
		this.right = right;
		this.bottom = bottom;
	}
	
	@Override
	public CardShape getShape() {
		return guessState();
	}

	@Override
	public CardShape guessState() {
		// Full pump
        if (Left.IsVertical() &
            Right.IsVertical() &
            Top.IsFlat() &
            Bottom.IsFlat())
            return CardShape.Full_Pump;
        // Tubing movement
        else if (
            Top.IsFlat() &
            Bottom.IsFlat() &
            Left.IsSlopeUp() &
            Left.IsGoodFit() &
            Right.IsSlopeUp() &
            Right.IsGoodFit())
            return CardShape.Tubing_Movement;
        // Fluid pound
        else if (
            Top.IsFlat() &
            Bottom.IsFlat() &
            Left.IsVertical() &
            (Bottom.Length < 0.8) &
            (Right.LeastSquaredFitLine.R2 > 0.015))
            return CardShape.Fluid_Pound;
        // Gas interference
        else if (
            Top.IsFlat() &
            Left.IsVertical() &
            Bottom.IsFlat() &
            Bottom.Length < 0.8)
            return CardShape.Gas_Interference;
        // Pump hitting
        else if (
            Left.IsVertical() &
            Right.IsVertical() &
            Top.FirstHalf().IsFlat() &
            Bottom.FirstHalf().IsFlat())
            return CardShape.Pump_Hitting;
        // Bent barrel
        else if (
            Left.IsVertical() &
            Right.IsVertical() &
            Bottom.Length > 0.8 &
            Top.Length > 0.8)
            return CardShape.Bent_Barrel;
        // Worn plunger
        else if (
            Bottom.IsFlat() &
            !Left.IsVertical() &
            !Right.IsVertical() &
            Top.Length < 0.9)
            return CardShape.Worn_Plunger;
        // Worn standing
        else if (
            Top.IsFlat() &
            !Left.IsVertical() &
            !Right.IsVertical() &
            Bottom.Length < 0.9)
            return CardShape.Worn_Standing;
        // Worn or split
        else if (
            Bottom.IsFlat() &
            Left.IsVertical())
            return CardShape.Worn_Or_Split_Barrel;
        // Fluid friction
        else if (
            Right.IsVertical() &
            Left.IsVertical())
            return CardShape.Fluid_Friction;
        // Drag friction
        else if (
            Right.Length > 0.7 &
            Left.Length > 0.7)
            return CardShape.Drag_Friction;
        else 
            return CardShape.Other;
    }
}
