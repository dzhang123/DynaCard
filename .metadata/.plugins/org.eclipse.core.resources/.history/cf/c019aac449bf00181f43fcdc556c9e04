package com.organization.dynacard;

import java.util.ArrayList;
import java.util.List;

import com.organization.dynacard.ICardEdge.Sides;

public class CardEdge implements ICardEdge, ILeastSquaredFit {
	private String name;
	private Sides side;
	private LeastSquaredLine leastSquaredLine;
	private LeastSquaredLine inverseLeastSquaredLine;
	private List<Point> points = new ArrayList<Point>();
	private int length;
	
	public CardEdge (String name, Sides side) {
		this.name = name;
		this.side = side;
	}
	public int getLength() {
		return length;
	}
	public Sides getSide () {
		return side;
	}
	@Override
	public LeastSquaredLine getLeastSquaredFit(List<Point> points) {
		return leastSquaredLine;
	}

	@Override
	public boolean Fit() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean IsGoodFit() {
		return this.leastSquaredLine.getR2() < 0.002 || this.inverseLeastSquaredLine.getR2() < 0.002;
	}

	@Override
	public boolean IsVertical() {
		return IsGoodFit() && Math.abs(inverseLeastSquaredLine.getSlope()) < 0.1;
	}

	@Override
	public boolean IsSlopeUp() {
		return IsGoodFit() && leastSquaredLine.getSlope() > 0.5;
	}

	@Override
	public boolean IsSlopeDown() {
		return IsGoodFit() && leastSquaredLine.getSlope() < -0.5;
	}

	@Override
	public boolean IsFlat() {
		return IsGoodFit() && Math.abs(leastSquaredLine.getSlope()) < 0.1;
	}

	@Override
	public ICardEdge getFirstHalf() {
		ICardEdge halfEdge = new CardEdge("First half of " + this.Name, this.side);
				
      new CardEdge { Name = "First half of " + this.Name, Side = this.Side, Points = new List<(double x, double y)>()};
        List<(double x, double y)> halfPoints = new List<(double x, double y)>();
        for (int i = 0; i < Points.Count; i++)
        {
            double x2 = Math.Pow(Points[0].x - Points[i].x, 2);
            double y2 = Math.Pow(Points[0].y - Points[i].y, 2);
            double distFromStart = Math.Pow(x2 + y2, 0.5);
            if (distFromStart <= 0.5 * this.Length)
            {
                halfPoints.Add(Points[i]);
            }
            else
                break;
        }
        halfEdge.Points = halfPoints;
        halfEdge.Fit();

        return halfEdge;
	}

	@Override
	public ICardEdge getSecondHalf() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void AddPoint(double x, double y) {
		// TODO Auto-generated method stub

	}

	@Override
	public void AddPoint(Point p) {
		// TODO Auto-generated method stub

	}

}
