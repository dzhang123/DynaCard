package com.organization.dynacard;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import com.organization.dynacard.ICardEdge.Sides;

public class CardEdge implements ICardEdge, ILeastSquaredFit {
	private String name;
	private Sides side;
	private LeastSquaredLine leastSquaredLine;
	private LeastSquaredLine inverseLeastSquaredLine;
	private List<Point> points = new ArrayList<Point>();
	private int length;
	
	public CardEdge (String name, Sides side) {
		this.name = name;
		this.side = side;
	}
	public int getLength() {
		return length;
	}
	public Sides getSide () {
		return side;
	}
	@Override
	public LeastSquaredLine getLeastSquaredFit(List<Point> points) {
		return leastSquaredLine;
	}

	@Override
	public boolean Fit() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean IsGoodFit() {
		return this.leastSquaredLine.getR2() < 0.002 || this.inverseLeastSquaredLine.getR2() < 0.002;
	}

	@Override
	public boolean IsVertical() {
		return IsGoodFit() && Math.abs(inverseLeastSquaredLine.getSlope()) < 0.1;
	}

	@Override
	public boolean IsSlopeUp() {
		return IsGoodFit() && leastSquaredLine.getSlope() > 0.5;
	}

	@Override
	public boolean IsSlopeDown() {
		return IsGoodFit() && leastSquaredLine.getSlope() < -0.5;
	}

	@Override
	public boolean IsFlat() {
		return IsGoodFit() && Math.abs(leastSquaredLine.getSlope()) < 0.1;
	}

	@Override
	public ICardEdge getFirstHalf() {
		ICardEdge halfEdge = new CardEdge("First half of " + name, this.side);
		
        
        for (int i = 0; i < this.getLength(); i++)
        {
            double x2 = Math.pow(points.get(0).x - points.get(i).x, 2);
            double y2 = Math.pow(points.get(0).y - points.get(i).y, 2);
            double distFromStart = Math.pow(x2 + y2, 0.5);
            if (distFromStart <= 0.5 * this.getLength())
            {
                halfEdge.addPoint(points.get(i));
            }
            else
                break;
        }
        halfEdge.Fit();

        return halfEdge;
	}

	@Override
	public ICardEdge getSecondHalf() {
		ICardEdge halfEdge = new CardEdge ("Second half of " + name, side);
		
        for (int i = getLength() - 1; i >= 0; i--)
        {
            double x2 = Math.pow(points.get(points.size() - 1).x - points.get(i).x, 2);
            double y2 = Math.pow(points.get(points.size() - 1).y - points.get(i).y, 2);
            double distFromEnd = Math.pow(x2 + y2, 0.5);
            if (distFromEnd <= 0.5 * getLength())
            {
                halfEdge.addPoint(points.get(i));
            }
            else
                break;
        }
        
        Collections.reverse(halfEdge.getPoints());
        
        halfEdge.Fit();

        return halfEdge;
	}

	@Override
	public void addPoint(double x, double y) {
		points.add(new Point(x, y));
	}

	@Override
	public void addPoint(Point p) {
		points.add(p);
	}
	
	@Override
	public List<Point> getPoints() {
		return points;
	}
}
