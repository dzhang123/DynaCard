package com.organization.dynacard;

import java.util.Collections;
import java.util.List;
import java.util.ArrayList;

import com.organization.dynacard.ICardEdge.CardParameters;
import com.organization.dynacard.IDynaCard.CardShape;

public class DynaCardFactory {

	public static CardShape getCardShape(List<double[]> values, double minimumAcceptableWeight) {
		
		List<Double> weights = new ArrayList<Double>();
		for (int i = 0; i < values.size(); i++) {
			weights.add(values.get(i)[2]);
		}
		
		double maxWeigth = Collections.max(weights);
		
        if (maxWeigth < minimumAcceptableWeight)
            return CardShape.Flowing_Well;
        return NewCard(values).Shape;
	}
	
	public static CardShape getCardShape (List<CardParameters> values, double minimumAcceptableWeight) {
		
		// todo: better lambda function?
		
		
	}
	
	
}
